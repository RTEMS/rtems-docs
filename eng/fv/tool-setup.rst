.. SPDX-License-Identifier: CC-BY-SA-4.0

.. Copyright (C) 2022 Trinity College Dublin


Formal Tools Setup
==================

A key requirement for methods and tools for RTEMS qualification was that they
comply to a large degree with RTEMS community guidelines. We wanted to avoid
having large complex tools with large library dependencies, and have tools and
notations that would be easy to maintain.

After reviewing a range of methods and tools, we settled on a technique based on
the SPIN model checker :cite:`Holzmann:1997:SPIN`, with its modelling language
called Promela (https://spinroot.com/). Promela is quite a low-level modelling
language that makes it easy to get close to code level, and is specifically 
targeted to modelling software. It is one of the most widely used 
model-checkers, both in industry and education. 
It uses linear-time temporal logic (:term:`LTL`) to express properties of interest.

It is open-source (https://github.com/nimble-code/Spin), actively maintained,
and very easy to install, needing only  a C compiler and the ``lex``/``yacc``
utilities.


Installing Tools
----------------

The test generation tools are found in ``formal/promela/src``, written for
Python3. That directory contains ``requirements.txt`` that identifies the
required Python libraries. A key requirement is the Coconut package, that
defines a form of pattern-matching syntax for Python. Source files have
extension ``.coco`` and are compiled into equivalent Python scripts.

We use the Python virtual environment facility here, as seen elsewhere in the
RTEMS ecosystem. To build the tools, enter ``formal/promela/src`` and issue the 
commands:

.. code:: shell

  make env
  . env/bin/activate
  make py

The test generation tools need to be used from within this Python virtual 
environment. Use the ``deactivate` command to exit from it.

Test generation is managed at the top level by the script ``testbuilder.py``
located in the top-level of ``formal/promela/src``.
To avoid using (long) absolute pathnames, it helps to define the following 
alias: 

.. code-block:: shell

  alias tbuild='python3 /..../formal/promela/src/testbuilder.py'

We will use this alias in what follows.

Tool Configuration
------------------

**The process described here makes changes to `rtems` directly rather than
using the `spec` folder in `rtems-central`. There are already hooks in the
`spec` folder that create ``model-0.yml`` with the right name, but this does
not seem to have propagated to the `rtems` submodule. This should probably be 
fixed**

Tool configuration involves setting up a new testsuite in RTEMS, and providing
information to ``tbuild`` that tells it where to find key locations, and some
command-line arguments for some of the tools.

Testsuite Setup
^^^^^^^^^^^^^^^

The C test code generated by these tools is installed into the main ``rtems``
repository  at ``testsuites/validation`` in the exact same way as other RTEMS
testcode.
This means that whenever ``waf`` is used at the top level to build and/or run
tests, that the formally generated code is automatically included.
This requires adding and modifying some *Specification Items*
(See Section :numref:`%s <ReqEngSpecificationItems>` ).

To create a testsuite called ``model-0`` (say), do the following, in the
``spec/build/testsuites/validation`` directory:

* Edit ``grp.yml`` and add the following two lines into the `links` entry:

  .. code-block:: YAML

    - role: build-dependency
      uid: model-0

* Copy ``validation-0.yml`` (say) to ``model-0.yml``, and change the following
  entries as shown:

  .. code-block:: YAML

    enabled-by: RTEMS_SMP
    source:
    - testsuites/validation/ts-model-0.c
    target: testsuites/validation/ts-model-0.exe

Then, go to the ``testsuites/validation`` directory, and copy 
``ts-validation-0.c`` to ``ts-model-0.c``, and edit as follows:

* Change all occurences of `Validation0` in comments to `Model0`.

* Change ``rtems_test_name`` to `"Model0"`.

Testbuilder Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^

For the ``tbuild`` program to run, it needs to know where to find the relevant
directories and files. It looks for this information from a file called
``testbuilder.yml`` in its own directory. This file is not provided, but a 
template for this file is provided as ``testbuilder-template.yml``. 
Configuration involves copying and adapting that template.

.. code-block:: YAML

  spin2test: <spin2test_directory>/spin2test.py
  rtems: <path-to-main-rtems-directory>  
  rsb: <rsb-build_directory>/rtems/6/bin/
  simulator: <path-to>/sparc-rtems6-sis
  testyamldir: <rtems>/spec/build/testsuites/validation/ 
  testcode: <rtems>/testsuites/validation/
  testexedir:  <rtems>/build/.../testsuites/validation/ 
  testsuite: model-0
  simulatorargs: -leon3 -r s -m 2  
  spinallscenarios: -DTEST_GEN -run -E -c0 -e 



Running Test Generation 
-----------------------


The help:

.. code-block::

  In order to generate test files the following input files are required:
    `<model>.pml`
    `<model>-rfn.yml`
    `<model>-pre.h`
    `<model>-post.h`
    `<model>-run.h`
  where `<model>` is the name of the model.

  `all <model>` will run clean, spin, gentests, copy, compile and run
  `spin <model>` will run SPIN to find all scenarios
  `gentests <model>` will produce C tests
  `clean <model>` will remove generated files.
  `copy <model>`
     - copies the generated  C files to the relevant RTEMS test source directory
     - updates the relevant RTEMS configuration yaml file
  `archive <model>`` will copy generated spn, trail, C, and test log files
     to the archive sub-directory of the current model directory.
  `compile` rebuilds the RTEMS test executable
  `run` runs the tests in the SIS simulator
  `zero` removes all generated C filenames from the RTEMS configuration yaml file
    - it does NOT remove the test sources from the RTEMS test source directory


The simplest way to check test generation is setup properly is to visit one of
the models, found under ``formal/promela/models`` and execute the following list
of commands:

.. code-block:: shell

   tbuild generate mymodel
   tbuild copy mymodel
   tbuild compile
   tbuild run

Go to the main ``rtems`` top-level, and rebuild using ``waf``,
and then use a simulator to run ``ts-model-0.exe`` directly.

**GB: please add some notion of
what is the expected output that one would be checking in the step
"use a simulator to run ts-model-0.exe directly."**

The output is identical to that generated by the regular RTEMS tests, using the
*Software Test Framework* (See Section :numref:`%s <_RTEMSTestFramework>` ).

The output:

.. code-block::


 SIS - SPARC/RISCV instruction simulator 2.29,  copyright Jiri Gaisler 2020
 Bug-reports to jiri@gaisler.se

 GR740/LEON4 emulation enabled, 4 cpus online, delta 50 clocks

 Loaded ts-model-0.exe, entry 0x00000000


  *** BEGIN OF TEST Model0 ***
  *** TEST VERSION: 6.0.0.03337dab21e961585d323a9974c8eea6106c803d
  *** TEST STATE: EXPECTED_PASS
  *** TEST BUILD: RTEMS_SMP
  *** TEST TOOLS: 10.3.1 20210409 (RTEMS 6, RSB 889cf95db0122bd1a6b21598569620c40ff2069d, Newlib eb03ac1)
  A:Model0
  S:Platform:RTEMS
  S:Compiler:10.3.1 20210409 (RTEMS 6, RSB 889cf95db0122bd1a6b21598569620c40ff2069d, Newlib eb03ac1)
  S:Version:6.0.0.03337dab21e961585d323a9974c8eea6106c803d
  S:BSP:gr740
  S:BuildLabel:DEFAULT
  S:TargetHash:SHA256:_xQeTNJwSla2bVbhWPVcI0emLk2bE_GVQfvzt9CN84k=
  S:RTEMS_DEBUG:0
  S:RTEMS_MULTIPROCESSING:0
  S:RTEMS_POSIX_API:0
  S:RTEMS_PROFILING:0
  S:RTEMS_SMP:1
  B:RtemsModelSystemEventsMgr8
  L:Runner Invoked
  L:Runner Wait Class: 512
  L:Runner WaitForEvent: 8
  L:Pushing Test Fixture...
  L:Runner Setup
  L:Creating Worker Wakeup Semaphore
  L:Creating Runner Wakeup Semaphore
  L:Construct Worker, sc = 0
  L:Starting Worker...
  L:Started Worker, sc = 0
  L:Test Fixture Pushed
  L:@@@ 0 INIT
  L:Runner running
  L:@@@ 4 TASK Runner
  L:@@@ 4 CALL SetProcessor 0
  L:@@@ 4 SIGNAL 0
  L:@@@ 4 WAIT 1
  L:Worker Running
  L:@@@ 3 TASK Worker
  L:@@@ 3 CALL SetProcessor 1
  L:@@@ 3 CALL EqualPriority
  L:@@@ 3 WAIT 0
  L:@@@ 3 CALL StartLog
  L:@@@ 3 CALL event_send 1 2 10 sendrc
  L:Calling Send(167837697,10)
  L:Returned 0x0 from Send
  L:@@@ 3 CALL CheckNoPreemption
  L:@@@ 3 SCALAR sendrc 0
  L:@@@ 3 SIGNAL 1
  L:@@@ 3 STATE 1 Zombie
  L:Worker finished
  L:@@@ 4 SCALAR pending 2 10
  L:@@@ 4 CALL event_receive 10 1 1 0 2 recrc
  L:Calling Receive(10,0,0,201264)
  L:Returned 0x0 from Receive
  L:@@@ 4 SCALAR recrc 0
  L:@@@ 4 SCALAR recout 2 10
  L:@@@ 4 SCALAR pending 2 0
  L:@@@ 4 SIGNAL 0
  L:@@@ 4 STATE 2 Zombie
  L:Runner finished
  L:Run Pop Fixture
  L:ctx->worker_wakeup = 436273153
  L:Runner Teardown
  L:Deleting Task id : 167837698
  L:Deleting Worker Wakeup Semaphore
  L:Deleting Runner Wakeup Semaphore
  L:ctx->worker_wakeup = 436273153
  E:RtemsModelSystemEventsMgr8:N:27:F:0:D:0.007016
  B:RtemsModelSystemEventsMgr7
  L:Runner Invoked
  L:Runner Wait Class: 512
  L:Runner WaitForEvent: 8
  L:Pushing Test Fixture...
  L:Runner Setup
  L:Creating Worker Wakeup Semaphore
  L:Creating Runner Wakeup Semaphore
  L:Construct Worker, sc = 0
  L:Starting Worker...
  L:Started Worker, sc = 0
  L:Test Fixture Pushed
  L:@@@ 0 INIT
  L:Runner running
  L:@@@ 4 TASK Runner
  L:@@@ 4 SIGNAL 0
  L:@@@ 4 WAIT 1
  L:Worker Running
  L:@@@ 3 TASK Worker
  L:@@@ 3 CALL EqualPriority
  L:@@@ 3 WAIT 0
  L:@@@ 3 CALL StartLog
  L:@@@ 3 CALL event_send 1 2 2 sendrc
  L:Calling Send(167837697,2)
  L:Returned 0x0 from Send
  L:@@@ 3 CALL CheckNoPreemption
  L:@@@ 3 SCALAR sendrc 0
  L:@@@ 3 SIGNAL 1
  L:@@@ 3 WAIT 0
  L:@@@ 4 SCALAR pending 2 2
  L:@@@ 4 SIGNAL 0
  L:@@@ 4 CALL event_receive 10 1 1 0 2 recrc
  L:Calling Receive(10,0,0,196824)
  L:@@@ 3 CALL event_send 1 2 8 sendrc
  L:Calling Send(167837697,8)
  L:Returned 0x0 from Send
  L:@@@ 3 STATE 2 Ready
  L:@@@ 3 STATE 1 Ready
  L:@@@ 3 SCALAR sendrc 0
  L:@@@ 3 SIGNAL 1
  L:@@@ 3 STATE 1 Zombie
  L:Worker finished
  L:Returned 0x0 from Receive
  ...
  L:@@@ 3 WAIT 0
  L:@@@ 3 CALL StartLog
  L:@@@ 3 CALL event_send 1 3 10 sendrc
  L:Calling Send(-1,10)
  L:Returned 0x4 from Send
  L:@@@ 3 CALL CheckNoPreemption
  L:@@@ 3 SCALAR sendrc 4
  L:@@@ 3 SIGNAL 1
  L:@@@ 3 STATE 1 Zombie
  L:Worker finished
  L:@@@ 4 SIGNAL 0
  L:@@@ 4 STATE 2 Zombie
  L:Runner finished
  L:Run Pop Fixture
  L:ctx->worker_wakeup = 436273159
  L:Runner Teardown
  L:Deleting Task id : 167837715
  L:Deleting Worker Wakeup Semaphore
  L:Deleting Runner Wakeup Semaphore
  L:ctx->worker_wakeup = 436273159
  E:RtemsModelEventsMgr0:N:21:F:0:D:0.005648
  Z:Model0:C:18:N:430:F:0:D:0.130464
  Y:ReportHash:SHA256:5EeLdWsRd25IE-ZsS6pduLDsrD_qzB59dMU-Mg2-BDA=

  *** END OF TEST Model0 ***

  cpu 0 in error mode (tt = 0x80)
    6927700  0000d580:  91d02000   ta  0x0

