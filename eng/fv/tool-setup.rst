.. SPDX-License-Identifier: CC-BY-SA-4.0

.. Copyright (C) 2022 Trinity College Dublin


Formal Tools Setup
==================

A key requirement for methods and tools for RTEMS qualification was that they
comply to a large degree with RTEMS community guidelines. We wanted to avoid
having large complex tools with large library dependencies, and have tools and
notations that would be easy to maintain.

After reviewing a range of methods and tools, we settled on a technique based on
the SPIN model checker :cite:`Holzmann:1997:SPIN`, with its modelling language
called Promela (https://spinroot.com/). Promela is quite a low-level modelling
language that makes it easy to get close to code level, and is specifically targeted to modelling software. It is one of the most widely
used model-checkers, both in industry and education. It uses linear-time
temporal logic (LTL) to express properties of interest.

It is open-source (https://github.com/nimble-code/Spin), actively maintained,
and very easy to install, needing only  a C compiler and the ``lex``/``yacc``
utilities.


Installing Tools
----------------

The test generation tools are found in ``formal/promela/src``, written for
Python3. That directory contains ``requirements.txt`` that identifies the
required Python libraries. A key requirement is the Coconut package, that
defines a form of pattern-matching syntax for Python. Source files have
extension ``.coco`` and are compiled into equivalent Python scripts.

To build, enter that directory and issue the commands:

.. code:: shell

  make env
  . env/bin/activate

To avoid using (long) absolute pathnames to the tools directory,
it is worth defining some environment variables and aliases:

**GB: maybe it makes sense for you to provide these as part of the env?
Is this stuff using venv or something else?**

.. code-block:: shell

  SPIN2TEST="/..../formal/promela/src/manual"
  export SPIN2TEST
  alias spin2test="${SPIN2TEST}/spin2test.sh"
  alias testgen="${SPIN2TEST}/testgen.sh"
  alias tbuild='python3 $SPIN2TEST/testbuilder.py'

**need to explain how to configure testbuilder (confuses GB)**


The C test code generated by these tools is installed into the main ``rtems``
repository  at ``testsuites/validation`` in the exact same way as other RTEMS
testcode.
This means that whenever ``waf`` is used at the top level to build and/or run
tests, that the formally generated code is automatically included.
This requires adding and modifying some *Specification Items*
(See Section :numref:`%s <ReqEngSpecificationItems>` ). Details about how to
do this are found in the :ref:`FormalMaint` sub-section.

Running Test Generation
-----------------------

The simplest way to check test generation is setup properly is to visit one of
the models, found under ``formal/promela/models`` and execute the following list
of commands:

.. code-block:: shell

   tbuild generate mymodel
   tbuild copy mymodel
   tbuild compile
   tbuild run

Go to the main ``rtems`` top-level, and rebuild using ``waf``,
and then use a simulator to run ``ts-model-0.exe`` directly.

**GB: please add some notion of
what is the expected output that one would be checking in the step
"use a simulator to run ts-model-0.exe directly."**
